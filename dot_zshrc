#Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export EDITOR="code"
export VISUAL="code"
export MYVIMRC="~/.local/share/chezmoi/dot_vim/"
export PATH="$PATH:./node_modules/.bin/"
export HOMEBREW_BREWFILE=~/.config/.brewfile

curl -fLo ~/.local/share/chezmoi/dot_vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

source /Users/maxdzyubak/.ghcup/env

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="dracula"

if [ -d "/opt/homebrew/opt/ruby/bin" ]; then
  export PATH=/opt/homebrew/opt/ruby/bin:$PATH
  export PATH=`gem environment gemdir`/bin:$PATH
fi

if [ -d "/usr/local/opt/ruby/bin" ]; then
  export PATH=/usr/local/opt/ruby/bin:$PATH
  export PATH=`gem environment gemdir`/bin:$PATH
fi

plugins=(git frontend-search fzf aliases react-native ruby iterm2 node npm rails redis-cli thefuck zsh-navigation-tools zsh-interactive-cd wd z web-search gulp gitignore gitfast asdf)

source $ZSH/oh-my-zsh.sh

if (( ! ${fpath[(I)/usr/local/share/zsh/site-functions]} )); then
  FPATH=/usr/local/share/zsh/site-functions:$FPATH
fi

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# bat
export BAT_THEME="Dracula"

# Aliases
alias cpwd="pwd|pbcopy"
alias cc="chezmoi cd"
alias a="code --add"
alias o="open"
alias oc="code"
alias t="touch"
alias tx="tmux"
alias md="mkdir"
alias rd="rmdir"
alias rf="rm -rf"
alias e="exa --tree --level=1 --group-directories-first --all --icons --long"
alias ee="exa --group-directories-first --all --icons"
alias ed="exa --all --only-dirs --icons"
alias edt="exa --tree --level=1 --all --only-dirs --icons"
alias et="exa --tree --all --icons"
alias e2="exa --tree --level=2 --all --icons"
alias e3="exa --tree --level=3 --all --icons"
alias e4="exa --tree --level=4 --all --icons"
alias er="exa --tree --level=1 --reverse --all --icons"
alias ff="fig run gc"
alias fc="fig run commit-m"
alias fcc="fig run commit"
alias fac="fig run add-all-and-commit-message"
alias fs="fig run lsd"
alias fa="fig run lsd-a"
alias ft="fig run lsd-tree"
alias ovc="vim /Users/maxdzyubak/.vim/vimrc"
alias ozc="vim /Users/maxdzyubak/.zshrc"
alias otc="vim /Users/maxdzyubak/.config/tmux/tmux.conf"
alias cdvscc="cd /Users/maxdzyubak/Library/Application\ Support/Code/User
"
alias cavc="chezmoi add /Users/maxdzyubak/.vim/vimrc ; chezmoi cd"
alias cazc="chezmoi add /Users/maxdzyubak/.zshrc ; chezmoi cd ; gaa . ; git commit -m 'Update zshrc' ; git push origin -u main ; cd"
alias cavscs="chezmoi add /Users/maxdzyubak/Library/Application\ Support/Code/User/settings.json ; chezmoi cd"
alias cavsck="chezmoi add /Users/maxdzyubak/Library/Application\ Support/Code/User/keybindings.json ; chezmoi cd"
alias ca="chezmoi add"
alias v="vim"
alias f="fd -gHl"
alias ip="dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com"
alias rb="rubocop"
alias r="ruby"
alias res="source ~/.zshrc"

# git-radar settings
export PROMPT="$PROMPT\$(git-radar --zsh --fetch) "
export GIT_RADAR_FORMAT="%{stash}%{remote}%{local}%{changes}"
export GIT_RADAR_FETCH_TIME=20
export GIT_RADAR_COLOR_CHANGES_UNTRACKED="$fg[red]"

# Key bindings fzf
# ---------------------------------------------------------------------------

# The code at the top and the bottom of this file is the same as in completion.zsh.
# Refer to that file for explanation.
if 'zmodload' 'zsh/parameter' 2>'/dev/null' && (( ${+options} )); then
  __fzf_key_bindings_options="options=(${(j: :)${(kv)options[@]}})"
else
  () {
    __fzf_key_bindings_options="setopt"
    'local' '__fzf_opt'
    for __fzf_opt in "${(@)${(@f)$(set -o)}%% *}"; do
      if [[ -o "$__fzf_opt" ]]; then
        __fzf_key_bindings_options+=" -o $__fzf_opt"
      else
        __fzf_key_bindings_options+=" +o $__fzf_opt"
      fi
    done
  }
fi

'emulate' 'zsh' '-o' 'no_aliases'

{

[[ -o interactive ]] || return 0

# CTRL-T - Paste the selected file path(s) into the command line
__fsel() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_CTRL_T_OPTS-}" $(__fzfcmd) -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}
zle     -N            fzf-file-widget
bindkey -M emacs '^T' fzf-file-widget
bindkey -M vicmd '^T' fzf-file-widget
bindkey -M viins '^T' fzf-file-widget

# ALT-C - cd into the selected directory
fzf-cd-widget() {
  local cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local dir="$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_ALT_C_OPTS-}" $(__fzfcmd) +m)"
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="builtin cd -- ${(q)dir}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
zle     -N             fzf-cd-widget
bindkey -M emacs '\ec' fzf-cd-widget
bindkey -M vicmd '\ec' fzf-cd-widget
bindkey -M viins '\ec' fzf-cd-widget

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} ${FZF_DEFAULT_OPTS-} -n2..,.. --scheme=history --bind=ctrl-r:toggle-sort,ctrl-z:ignore ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle reset-prompt
  return $ret
}
zle     -N            fzf-history-widget
bindkey -M emacs '^R' fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget

} always {
  eval $__fzf_key_bindings_options
  'unset' '__fzf_key_bindings_options'
}
# ---------------------------------------------------------------------------

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
